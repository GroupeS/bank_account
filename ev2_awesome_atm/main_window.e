note
	description: "EiffelVision Widget MAIN_WINDOW.%
		%The original version of this class was generated by EiffelBuild."
	generator: "EiffelBuild"
	author: "Paul-G. Crismer"
	license: "MIT License"
	copyright: "2012- Paul-G. Crismer & others (pgcrism@users.sf.net)"
	date: "$Date: 2010-12-22 10:39:24 -0800 (Wed, 22 Dec 2010) $"
	revision: "$Revision: 85202 $"

class
	MAIN_WINDOW

inherit
	MAIN_WINDOW_IMP


feature {NONE} -- Initialization

	user_create_interface_objects
			-- Create any auxilliary objects needed for MAIN_WINDOW.
			-- Initialization for these objects must be performed in `user_initialization'.
		do
				-- Create attached types defined in class here, initialize them in `user_initialization'.
		end

	user_initialization
			-- Perform any initialization on objects created by `user_create_interface_objects'
			-- and from within current class itself.
		do
				-- Initialize types defined in current class
				setup_transaction_list (transaction_list)
				action_amount.set_font (create {EV_FONT}.make_with_values ({EV_FONT_CONSTANTS}.family_modern, {EV_FONT_CONSTANTS}.weight_bold, {EV_FONT_CONSTANTS}.shape_regular, 25))
				action_amount.set_text ("")
				action_amount.focus_in_actions.extend (agent reset_action_amount)
				---
				refresh_account

		end

	reset_action_amount
		do
			action_amount.set_text ("")
		end

	setup_transaction_list (a_list: like transaction_list)
		do
			a_list.set_column_widths (<< 90, 80, 80, 150, 150>>)
			a_list.set_column_titles (<<"Date", "Time", "Operation", "Amount", "New balance">>)
		end

	refresh_account
		do
			account_number.set_text (account.number.number)
			account_balance.set_text (account.balance.out)
		end

feature -- Access

	controller : BANK_ACCOUNT_CONTROLLER
		attribute
			create Result.make (create {TRANSACTIONAL_BANK_ACCOUNT}.make (create {BANK_ACCOUNT_NUMBER}.make ("000000000000")))
		end

	account : TRANSACTIONAL_BANK_ACCOUNT
		do
			Result := controller.account
		end

feature -- Element change

	set_controller (a_controller: like controller)
		do
			controller := a_controller
			a_controller.invalid_deposit_actions.extend (agent (a, b: STRING) do afficher_erreur (b) end)
			a_controller.invalid_withdraw_actions.extend (agent (a, b: STRING) do afficher_erreur (b) end)
			a_controller.transactions_changed_actions.extend (agent prepend_transaction(?))
			a_controller.balance_changed_actions.extend (agent (b : INTEGER) do account_balance.set_text (b.out) end)
			refresh_account
		end

feature {NONE} -- Implementation


	on_withdraw
			-- Called by `select_actions' of `action_withdraw'.
		do
			controller.withdraw (action_amount.text)
		end


	on_deposit
			-- Called by `select_actions' of `action_deposit'.
		do
			controller.deposit (action_amount.text)
		end

	afficher_erreur (un_message : STRING)
		do
			error_message.set_text (un_message)
			action_amount.key_press_actions.extend_kamikaze (agent (a_key: EV_KEY; a_label: EV_LABEL)
				do
					a_label.set_text ("")
				end (?, error_message))
		end

	prepend_transaction (une_transaction: BANK_ACCOUNT_TRANSACTION)
		local
			l_date,
			l_time,
			l_operation,
			l_amount,
			l_balance : STRING
			l_row: EV_MULTI_COLUMN_LIST_ROW
		do
			l_date := une_transaction.timestamp.date.formatted_out ("[0]dd/[0]mm/yyyy")
			l_time := une_transaction.timestamp.time.formatted_out ("[0]hh:[0]mi:[0]ss")
			if une_transaction.is_deposit then
				l_operation := "D"
			else
				l_operation := "W"
			end
			l_amount := une_transaction.amount.out
			l_balance := controller.account.balance.out
			--
			create l_row.default_create
			l_row.fill_with_strings_8 (<<l_date, l_time, l_operation, l_amount, l_balance>>)
			transaction_list.put_front (l_row)
		end
end
